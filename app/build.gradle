apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'io.fabric'
apply plugin: 'jacoco'

android {
    compileSdkVersion 29

    defaultConfig {
        applicationId "com.alancamargo.tweetreader"
        minSdkVersion 21
        targetSdkVersion 29
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true

        buildConfigField "String", "CONSUMER_KEY", "\"$System.env.TWITTER_CONSUMER_KEY\""
        buildConfigField "String", "CONSUMER_SECRET", "\"$System.env.TWITTER_CONSUMER_SECRET\""
    }

    signingConfigs {
        free {
            keyAlias System.getenv("KEY_ALIAS")
            keyPassword System.getenv("KEY_PASSWORD")
            storeFile file(System.getenv("STORE_FILE"))
            storePassword System.getenv("STORE_PASSWORD")
        }

        paid {
            keyAlias System.getenv("KEY_ALIAS_TWEET_READER_PAID")
            keyPassword System.getenv("KEY_PASSWORD_TWEET_READER_PAID")
            storeFile file(System.getenv("STORE_FILE_TWEET_READER_PAID"))
            storePassword System.getenv("STORE_PASSWORD_TWEET_READER_PAID")
        }
    }

    buildTypes {
        debug {
            testCoverageEnabled true
        }

        release {
            minifyEnabled true
            shrinkResources true
            debuggable false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'),
                    'proguard-rules.pro'
        }
    }

    flavorDimensions "version", "mode"

    productFlavors {
        moro {
            // TODO
            def freeVersionCode = 1
            def paidVersionCode = 1
            def freeVersionName = '2020.2.0'
            def paidVersionName = '2020.2.0'

            dimension "version"
            versionCode freeVersionCode
            versionName freeVersionName
            applicationIdSuffix ".moro"
            buildConfigField "String", "USER_ID", '"1113094855281008641"'
        }

        trump {
            // TODO
            def freeVersionCode = 14
            def paidVersionCode = 1
            def freeVersionName = '2020.2.2'
            def paidVersionName = '2020.2.0'

            dimension "version"
            versionCode freeVersionCode
            versionName freeVersionName
            applicationIdSuffix ".trump"
            buildConfigField "String", "USER_ID", '"25073877"'
        }

        pjw {
            // TODO
            def freeVersionCode = 13
            def paidVersionCode = 1
            def freeVersionName = '2020.2.1'
            def paidVersionName = '2020.2.0'

            dimension "version"
            versionCode freeVersionCode
            versionName freeVersionName
            applicationIdSuffix ".pauljosephwatson"
            buildConfigField "String", "USER_ID", '"18643437"'
        }

        jb {
            // TODO
            def freeVersionCode = 1
            def paidVersionCode = 1
            def freeVersionName = '2020.2.0'
            def paidVersionName = '2020.2.0'

            dimension "version"
            versionCode freeVersionCode
            versionName freeVersionName
            applicationIdSuffix ".jb"
            buildConfigField "String", "USER_ID", '"27260086"'
        }

        bolsonaro {
            // TODO
            def freeVersionCode = 13
            def paidVersionCode = 1
            def freeVersionName = '2020.2.1'
            def paidVersionName = '2020.2.0'

            dimension "version"
            versionCode freeVersionCode
            versionName freeVersionName
            applicationIdSuffix ".bolsonaro"
            buildConfigField "String", "USER_ID", '"128372940"'
        }

        free {
            dimension "mode"
            signingConfig signingConfigs.free
        }

        paid {
            dimension "mode"
            applicationIdSuffix ".paid"
            signingConfig signingConfigs.paid
        }
    }

    androidExtensions {
        experimental true
    }

    sourceSets {
        main {
            assets.srcDirs = ['src/main/assets', 'src/androidTest/assets/']
            java.srcDirs = ['src/main/kotlin']
        }
        free.java.srcDirs = ['src/free/kotlin']
        paid.java.srcDirs = ['src/paid/kotlin']
        androidTest.java.srcDirs = ['src/androidTest/kotlin']
        test.java.srcDirs = ['src/test/kotlin']
    }

    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }

    testOptions {
        animationsDisabled true
        unitTests.returnDefaultValues true
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
        exclude("META-INF/*.kotlin_module")
    }
}

jacoco {
    toolVersion = "$jacoco_version"
    reportsDir = file("$project.buildDir/coverageReport")
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses true
}

task deleteOldReports(type: Delete) {
    delete "$project.buildDir/coverageReport"
}

task jacocoTestReport(
        type: JacocoReport,
        dependsOn: [
                'deleteOldReports',
                'testMoroDebugUnitTest',
                'createMoroDebugCoverageReport'
        ]
) {
    reports {
        xml.enabled false
        html.enabled true
    }

    def fileFilter = [
            '**/R.class',
            '**/R$*.class',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*Test*.*',
            'android/**/*.*'
    ]

    def debugTree = fileTree(
            dir: "$project.buildDir/intermediates/app_classes/moroDebug",
            excludes: fileFilter
    )

    def mainSrc = "$project.projectDir/src/main/kotlin"

    sourceDirectories.from = files(mainSrc)
    classDirectories.from = files(debugTree)
    executionData.from = fileTree(
            dir: "$project.buildDir",
            includes: [
                    "jacoco/testMoroDebugUnitTest.exec",
                    "outputs/code_coverage/moroDebugAndroidTest/connected/**/*.ec"
            ]
    )
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // region Main code libraries
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.core:core-ktx:1.3.0-rc01'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'com.google.android.material:material:1.2.0-alpha06'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-moshi:$retrofit_version"
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version"
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.0.0'
    implementation "androidx.room:room-runtime:$room_version"
    implementation "androidx.room:room-ktx:$room_version"
    implementation 'de.hdodenhof:circleimageview:3.1.0'
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'com.nostra13.universalimageloader:universal-image-loader:1.9.5'
    implementation 'com.google.firebase:firebase-core:17.4.1'
    implementation 'com.crashlytics.sdk.android:crashlytics:2.10.1'
    implementation 'org.jetbrains.kotlinx:kotlinx-metadata-jvm:0.0.5'
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"
    implementation 'com.github.chrisbanes:PhotoView:2.3.0'
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycle_version"
    implementation "org.koin:koin-core:$koin_version"
    implementation "org.koin:koin-android:$koin_version"
    implementation "org.koin:koin-androidx-scope:$koin_version"
    implementation "org.koin:koin-android-ext:$koin_version"
    implementation "org.koin:koin-androidx-ext:$koin_version"
    kapt "androidx.room:room-compiler:$room_version"
    // endregion

    // region Free version libraries
    freeImplementation 'com.google.firebase:firebase-ads:19.1.0'
    // endregion

    // region Instrumented test libraries
    androidTestImplementation 'androidx.test:runner:1.3.0-beta01'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0-beta01'
    androidTestImplementation 'androidx.test.espresso:espresso-intents:3.2.0'
    androidTestImplementation 'androidx.arch.core:core-testing:2.1.0'
    androidTestImplementation 'br.com.concretesolutions:kappuccino:1.2.1'
    androidTestImplementation "io.mockk:mockk-android:$mockk_version"
    androidTestImplementation "com.google.truth:truth:$truth_version"
    androidTestImplementation("org.koin:koin-test:$koin_version") {
        exclude group: 'org.mockito'
    }
    // endregion

    // region Unit test libraries
    testImplementation 'junit:junit:4.13'
    testImplementation "com.google.truth:truth:$truth_version"
    testImplementation "io.mockk:mockk:$mockk_version"
    testImplementation 'android.arch.core:core-testing:1.1.1'
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.3.3'
    testImplementation 'com.squareup.okhttp3:mockwebserver:4.3.1'
    // endregion
}
